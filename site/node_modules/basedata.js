'use strict';
var debug = require('debug')('basedata');
var util = require('util');
var fs = require('fs');
var path = require('path');
var async = require('async');
var tool = require('leaptool');

module.exports = function(app, module_name) {

  var block = {};

  // throw error if no user is logged in, otherwise continue next
  block.checkLogin = function(req, res, next) {
    var callback = arguments[3] || null;
    var loginUser = req.session && req.session.user;
    if (loginUser) {
      next();
    } else {
      var message = 'user is not logged in';
      app.cb(new Error(message), null, { message:message }, req, res, callback);
    }
  };

  block.get = function(req, res, condition, filter, callback) {
    app.db.find(module_name, condition, filter, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    });
  };

  // method for route handling, condition and filter are derived from req object
  block.getWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var condition = tool.getQueryCondition(parameter);
    var filter = tool.getQueryFilter(parameter);
    block.get(req, res, condition, filter, callback);
  };

  block.getById = function(req, res, id, callback) {
    var condition = { _id:id };
    var filter = {};
    app.db.find(module_name, condition, filter, function(error, docs, info) {
      app.cb(error, docs, info, req, res, callback);
    });
  };
  
  block.getByField = function(req, res, field, value, callback) {
    var condition = {};
    condition[field] = value;
    var filter = {};
    debug('getByField:', condition);
    app.db.find(module_name, condition, filter, function(error, docs, info) {
      debug('getByField search result:', error, docs, info);
      app.cb(error, docs, info, req, res, callback);
    });
  };
  
  block.getByIdWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var id = parameter.id || parameter._id;
    block.getById(req, res, id, callback);
  };

  block.addWeb = function(req, res) {
      var callback = arguments[3] || null;
      var parameter = tool.getReqParameter(req);
      block.add(req, res, parameter, callback);
  };

  block.add = function(req, res, parameter) {
      var callback = arguments[3] || null;
      var model = app.module[module_name].model;
      var doc = {};
      for (var property in model) {
          if (parameter.hasOwnProperty(property)) {
              var value = app.engine.castData(parameter[property], model[property]);
              doc[property] = value;
          }
      }
      debug('add to database - doc:', doc);
      app.db.add(module_name, doc, function(error, docs, info) {
          app.cb(error, docs, info, req, res, callback);
      });
  };

  block.editWeb = function(req, res) {
      var callback = arguments[3] || null;
      var parameter = tool.getReqParameter(req);
      block.edit(req, res, parameter, callback);
  };

  block.edit = function(req, res, parameter) {
      var callback = arguments[3] || null;
      var model = app.module[module_name].model;
      var id = parameter._id || parameter.id;
      app.db.findById(module_name, id, function(error, doc, info) {
          if (!doc) {
              error = new Error('no doc found for id=' + id);
              app.cb(error, [], info, req, res, callback);
              return;
          }
          for (var property in model) {
              if (parameter.hasOwnProperty(property)) {
                  var type = model[property].type;
                  var subtype = model[property].subtype;
                  subtype = subtype && subtype.type;
                  if (type == 'string' && subtype == 'password') {
                      var saltValue = doc.salt || '';
                      doc[property] = tool.hash(parameter[property] + saltValue);
                  } else {
                      var value = app.engine.castData(parameter[property], model[property]);
                      doc[property] = value;
                  }
              }
          }
          app.db.updateById(module_name, id, doc, function(error, docs, info) {
              app.cb(error, docs, info, req, res, callback);
          });
      });
  };

  return block;
};
