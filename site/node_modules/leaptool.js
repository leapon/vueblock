'use strict';
var debug = require('debug')('leaptool');
var util = require('util');
var fs = require('fs');
var path = require('path');
var crypto = require('crypto');
var exec = require('child_process').exec;
var moment = require('moment');
var jwt = require('jsonwebtoken');
var _ = require('underscore');

// default setting
exports.getDefaultSetting = function(serverPath) {
  serverPath = path.resolve(serverPath);
  var setting = {
    // web app
    app_name: process.env.LEAPEASE_APP_NAME || 'leapbase',
    website: process.env.LEAPEASE_WEBSITE || 'http://localhost:8050',
    access_check: process.env.LEAPEASE_ACCESS_CHECK || false,
    access_code: process.env.LEAPEASE_ACCESS_CODE || 'password',
    invite_code_user: process.env.LEAPEASE_INVITE_CODE_USER || 'hello',
    invite_code_admin: process.env.LEAPEASE_INVITE_CODE_ADMIN || 'world',
    token_secret: process.env.LEAPEASE_TOKEN_SECRET || 'password1234',
    session_secret: process.env.LEAPEASE_SESSION_SECRET || 'mykey98765',
    // http/https mode
    http_mode: process.env.LEAPEASE_HTTP_MODE || true,
    http_port: process.env.LEAPEASE_HTTP_PORT || 8050,
    https_mode: process.env.LEAPEASE_HTTPS_MODE || false,
    https_port: process.env.LEAPEASE_HTTPS_PORT || 443,
    https_key: process.env.LEAPEASE_HTTPS_KEY || '',
    https_certificate: process.env.LEAPEASE_HTTPS_CERTIFICATE || '',
    https_root_certificate: process.env.LEAPEASE_HTTPS_ROOT_CERTIFICATE || '',
    https_intermediate_certificate: process.env.LEAPEASE_INTERMEDIATE_CERTIFICATE || '',
    http_to_https: process.env.LEAPEASE_HTTP_TO_HTTPS || false, // redirect http to https
    // path name
    app_modules_name: process.env.LEAPEASE_APP_MODULES || 'app_modules',
    public_name: process.env.LEAPEASE_PUBLIC_NAME || 'public',
    server_path: serverPath, // absolute path to site folder
    www_path: path.join(serverPath, 'public'), // absolute path to public folder
    // database
    database: {
      type: process.env.LEAPEASE_DATABASE_TYPE || '', // mongo
      host: process.env.LEAPEASE_DATABASE_HOST || '', // localhost
      port: process.env.LEAPEASE_DATABASE_PORT || '', // 27017
      name: process.env.LEAPEASE_DATABASE_NAME || 'leapbase'
    },
    // socketio
    use_socketio: process.env.LEAPEASE_USE_SOCKET_IO || false,
    // email setting
    email: {
      service: process.env.LEAPEASE_EMAIL_SERVICE || 'gmail',
      username: process.env.LEAPEASE_EMAIL_USERNAME || 'test@example.com',
      password: process.env.LEAPEASE_EMAIL_PASSWORD || 'test',
      sender: process.env.LEAPEASE_EMAIL_SENDER || 'test@example.com'
    },
    analytics: {
      type: process.env.LEAPEASE_ANALYTICS_TYPE || '',
      key: process.env.LEAPEASE_ANALYTICS_KEY || ''
    }
  };
  return setting;
};

// create an object with given prototype object
// source: Douglas Crockford - Advanced JavaScript video
exports.object = function(prototypeObject) {
  function F() {};
  F.prototype = prototypeObject;
  var newObject = new F();
  newObject._super = prototypeObject;
  return newObject;
};

exports.encrypt = function(text, key) {
  var cipher = crypto.createCipher('aes-256-cbc', key);
  var crypted = cipher.update(text,'utf8','hex');
  crypted += cipher.final('hex');
  return crypted;
};

exports.decrypt = function(input, key) {
  var decipher = crypto.createDecipher('aes-256-cbc', key)
  var dec = decipher.update(input,'hex','utf8')
  dec += decipher.final('utf8')
  return dec;
};

exports.hash = function(input) {
  input = input || '';
  return crypto.createHash('sha512').update(input).digest('hex');
};

exports.pad = function(number, length) {
  var str = '' + number;
  while (str.length < length) {
    str = '0' + str;
  }
  return str;
};

/**
 * force value conversion in given data type, used in getReqParameter
 */
exports.forceDataType = function(object, property, datatype) {
  if (typeof object[property] != 'undefined') {
    switch (datatype) {
      case 'int':
        object[property] = parseInt(object[property]);
        break;
      case 'float':
        object[property] = parseFloat(object[property]);
        break;
      case 'boolean':
        object[property] = !!object[property];
        break;
      default:
        object[property] = object[property] || null;
    }
  }
};

/**
 * collect parameter from req.params, req.body and req.query
 * req.params - route params like /user/:objectId
 * req.body - post request params via connect.bodyDecoder
 * req.query - query string like ?name=joe
 */
exports.getReqParameter = function(req) {
  var parameter = {};
  if (req.params) {
    for (var p in req.params) {
      parameter[p] = req.params[p];
    }
  }
  if (req.body) {
    for (var p in req.body) {
      parameter[p] = req.body[p];
    }
  }
  if (req.query) {
    for (var p in req.query) {
      parameter[p] = req.query[p];
    }
  }
  if (req.files) {
    for (var p in req.files) {
      parameter[p] = req.files[p];
    }
  }

  // enforce data type on certain parameters
  exports.forceDataType(parameter, 'skip', 'int');
  exports.forceDataType(parameter, 'limit', 'int');
  exports.forceDataType(parameter, 'start', 'int');
  exports.forceDataType(parameter, 'end', 'int');

  return parameter;
};

/**
 * set parameters on req.query object
 *
 */
exports.setReqParameter = function(req, parameter) {
  for (var p in parameter) {
    req.query[p] = parameter[p];
  }
};

/**
 * clear parameters on req
 */
exports.clearReqParameter = function(req) {
  req.params = {};
  req.body = {};
  req.query = {};
};

exports.base64 = {
  // encode JSON object in base64
  encodeObject: function(object) {
    return new Buffer(JSON.stringify(object)).toString('base64');
  },
  encode: function(data) {
    return new Buffer(data).toString('base64');
  },
  // decode JSON object from base64
  decodeObject: function(text) {
    return JSON.parse(new Buffer(text, 'base64').toString());
  },
  decode: function(text) {
    return new Buffer(text, 'base64').toString();
  }
};

exports.stringify = function(input, replacer, spaces, padding) {
  var result = JSON.stringify(input, replacer, spaces);
  var lines = result.split('\n');
  lines = exports.padLines(lines, padding);
  return lines.join('\n');
}

/**
 * jwt token utillity
 */
exports.encodeToken = function(entry, secret) {
  var token = jwt.sign(entry, secret);  // sync operation
  return token;
}

exports.decodeToken = function(token, secret) {
  var decoded = jwt.verify(token, secret);  // sync operation
  return decoded;
}

/**
 * extrac module name from url
 * /data/<module>/xyz
 * /<module>/xyz
 */
exports.getModuleFromUrl = function(url) {
  var module_name = '';
  var parts = url.split('/');
  if (parts[1] == 'data') {
    module_name = parts[2];
  } else {
    module_name = parts[1];
  }
  return module_name;
}
